Instructions Wanted:

ADD (R1) (R2) - Add 2 Registers 
ADI (R1) (N1) - Add 1 Reg and 1 int
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These 2 commands will be accessed as ADD. 
If you provide a number for the seccond operand, 
then it will do ADI, otherwise, ADD
-----------------------------------------------


SUB (R1) (R2) - Sub 2 Registers
SBI (R1) (N1) - Sub 1 Reg and 1 Int
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These 2 commands will be accessed as SUB. 
If you provide a number for the seccond operand, 
then it will do SBI, otherwise, SUB
-----------------------------------------------


AND (R1) (R2) - AND 2 Registers
ANI (R1) (N1) - AND 1 Reg and 1 Int
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These 2 commands will be accessed as AND. 
If you provide a number for the seccond operand, 
then it will do ANI, otherwise, AND
-----------------------------------------------


NND (R1) (R2) - NAND 2 Reg
NDI (R1) (N1) - NAND 1 Reg and 1 Int
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These 2 commands will be accessed as NND. 
If you provide a number for the seccond operand, 
then it will do NDI, otherwise, NND
-----------------------------------------------


CMP (R1) (R2) - Compare 2 Reg
CPI (R1) (N1) - Compare 1 Reg and 1 Int
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These 2 commands will be accessed as CMP. 
If you provide a number for the seccond operand, 
then it will do CPI, otherwise, CMP
-----------------------------------------------


LD(A, B, X, Y) - LOAD mem address into Register
LI(A, B, X, Y) - LOAD Integer into Register
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These 2 commands will be accessed as LD(A, B, X, Y). 
If you provide a number for the seccond operand, 
then it will do LI(A, B, X, Y), otherwise, LD(A, B, X, Y)
-----------------------------------------------


ST(A, B, X, Y) Store Register into Mem
SI(A, B, X, Y) Store Integer into Mem
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These 2 commands will be accessed as LD(A, B, X, Y). 
If you provide a number for the seccond operand, 
then it will do LI(A, B, X, Y), otherwise, LD(A, B, X, Y)
-----------------------------------------------


PSH - PUSH -- Push register into stack


POP - POP -- Pop from stack to register

T (A, B, X, Y) -> (A, B, X, Y) - Akin to TXA, TAX, TAY, and TYA from 6502 ASM

BNE -- Branch if Not Equal

BEQ -- Branch if Equal

BGE -- Branch if Greater Than or Equal To

BGT -- Branch if Greater Than

BLE -- Branch if Less Than or Equal To

BLT -- Branch if Less Than

LSL -- Rotate Right

LSR -- Rotate Left





Numbers will be denoted as #
Addresses will be denoted as $

